#!/usr/bin/env node
void require("j6pack/register")
process.title = "budget/web"

var _ = require("root/lib/underscore")
var Fs = require("fs")
var Url = require("url")
var Http = require("http")
var Express = require("express")
var Config = require("root/config")
var HttpError = require("standard-http-error")
var ENV = process.env.NODE_ENV
var PORT = process.env.PORT || 3030

var app = module.exports = Express()
app.enable("trust proxy", "loopback")
app.engine(".jsx", require("j6pack/express"))
app.set("views", __dirname + "/../views")

// Handle static files in-app to ensure proper cache headers in the production
// environment app server.
if (ENV == "development") app.use(Express.static(__dirname + "/../public", {
	setHeaders: (res) => res.setHeader("Cache-Control", "no-cache")
}))

if (ENV == "development") app.use(require("morgan")("dev"))

app.use((req, res, next) => { res.locals.req = req; next() })

app.use(require("cookie-parser")(Config.cookieSecret))
app.use(require("body-parser").urlencoded({extended: true}))
app.use(require("body-parser").json())
app.use(require("root/lib/middleware/multipart_form_middleware"))
app.use(require("root/lib/middleware/method_override_middleware"))
app.use(require("root/lib/middleware/cache_middleware"))
app.use(require("root/lib/middleware/csrf_middleware"))
app.use(require("root/lib/middleware/session_middleware"))

_.each({
	"/": require("../controllers/home_controller").router,
	"/account": require("../controllers/account_controller").router,
	"/sessions": require("../controllers/sessions_controller").router,
	"/schools": require("../controllers/schools_controller").router
}, (router, path) => app.use(path, router))

app.use(function(_req, _res, next) { next(new HttpError(404)) })
app.use(require("root/lib/middleware/error_reporter_middleware"))

app.use(require("root/lib/middleware/error_handler_middleware").bind(null,
	function(err, _req, res) {
	if (err instanceof HttpError) res.render("error_page.jsx", {
		message: err.description || err.message
	})
	else res.render("error_page.jsx", {
		title: "Vabandust!",
		message: "Süsteemi viga. Palun proovi uuesti, ja kui probleem kordub, võta meiega ühendust!"
	})
}))

if (module.parent) return
runServer(app, PORT)

function runServer(app, port) {
	if (!isFinite(port) && Fs.existsSync(port) && Fs.lstatSync(port).isSocket())
		Fs.unlinkSync(port)

	Http.createServer(app).listen(port, function() {
		// Make world-writable to allow the web server to read and write to it.
		if (!isFinite(port)) Fs.chmodSync(port, 0o777)
		var addr = this.address()

		console.info("Listening on %s.", typeof addr == "string"
			? addr
			: Url.format({protocol: "http", hostname: addr.address, port: addr.port}))
	})
}
